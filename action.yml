name: Setup Micro-Manager Test Device Adapters

description: >
  Downloads a specified or latest release of the pymmcore-plus test device adapters
  and extracts them into the given destination directory (or to sensible OS defaults).

inputs:
  destination:
    description: |
      (Optional) Destination directory for the test device adapters.
      If empty, defaults to:
        - Windows: %LOCALAPPDATA%\pymmcore-plus\pymmcore-plus\mm
        - macOS: ~/Library/Application Support/pymmcore-plus/mm
        - Linux: ~/.local/share/pymmcore-plus/mm
    required: false
    default: ""
  version:
    description: Version tag to install (or "latest")
    required: false
    default: "latest"

outputs:
  version:
    description: Resolved adapter version
    value: ${{ steps.get-version.outputs.version }}
  mm-data-dir:
    description: Directory where adapters were extracted
    value: ${{ steps.set-path.outputs.mm-data-dir }}

runs:
  using: composite
  steps:
    - name: Fetch release
      shell: bash
      id: download
      run: |
        echo "üîç runner.os=${{ runner.os }}, runner.arch=${{ runner.arch }}"

        if [ "${{ inputs.version }}" = "latest" ]; then
          api="https://api.github.com/repos/pymmcore-plus/mm-test-adapters/releases/latest"
        else
          api="https://api.github.com/repos/pymmcore-plus/mm-test-adapters/releases/tags/${{ inputs.version }}"
        fi

        echo "‚öôÔ∏è  Fetching release metadata from $api"
        json=$(curl -sf -H "Accept: application/vnd.github.v3+json" "$api") || {
          echo "‚ùå GitHub API request failed"
          exit 1
        }

        # show just the tag and asset names for debugging
        echo "‚ÑπÔ∏è  Release: $(jq -c '{ tag:.tag_name, assets:.assets[].name }' <<<"$json")"

        version=$(jq -r .tag_name <<<"$json")
        asset="mm-test-adapters-${{ runner.os }}-${{ runner.arch }}.zip"
        download_url=$(jq -r --arg name "$asset" \
          '.assets[] | select(.name==$name).browser_download_url' \
          <<<"$json")

        if [ -z "$download_url" ] || [ "$download_url" = "null" ]; then
          echo "‚ùå Asset $asset not found in release $version"
          exit 1
        fi

        echo "‚¨áÔ∏è  Downloading $asset"
        curl -L -f -o mm-test-adapters.zip "$download_url"

        # export version for downstream
        echo "version=$version" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Set MM_DATA_DIR
      shell: bash
      id: set-path
      run: |
        if [ -n "${{ inputs.destination }}" ]; then
          base="${{ inputs.destination }}"
        else
          case "${{ runner.os }}" in
            Windows) base="$LOCALAPPDATA/pymmcore-plus/pymmcore-plus/mm" ;;
            macOS)   base="$HOME/Library/Application Support/pymmcore-plus/mm" ;;
            Linux)   base="$HOME/.local/share/pymmcore-plus/mm" ;;
          esac
        fi

        # build final path and export only as a STEP OUTPUT
        mm_out="$base/Micro-Manager-$version"
        echo "mm-data-dir=$mm_out" >> $GITHUB_OUTPUT

    - name: Extract adapters
      shell: bash
      run: |
        out="${{ steps.set-path.outputs.mm-data-dir }}"
        mkdir -p "$out"
        unzip -o mm-test-adapters.zip -d "$out"
        rm mm-test-adapters.zip
