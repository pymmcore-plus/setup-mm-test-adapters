name: Setup Micro-Manager Test Device Adapters

description: >
  Downloads a specified or latest release of the pymmcore-plus test device adapters
  and extracts them into the given destination directory (or to sensible OS defaults).

inputs:
  destination:
    description: |
      (Optional) Destination directory for the test device adapters.
      If empty, defaults to:
        - Windows: %LOCALAPPDATA%\pymmcore-plus\pymmcore-plus\mm
        - macOS: ~/Library/Application Support/pymmcore-plus/mm
        - Linux: ~/.local/share/pymmcore-plus/mm
    required: false
    default: ""
  version:
    description: Version tag to install (or "latest")
    required: false
    default: "latest"

outputs:
  version:
    description: Resolved adapter version
    value: ${{ steps.get-version.outputs.version }}
  mm-data-dir:
    description: Directory where adapters were extracted
    value: ${{ steps.set-path.outputs.mm-data-dir }}

runs:
  using: composite
  steps:
    - name: Fetch release
      shell: bash
      id: download
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        repo="pymmcore-plus/mm-test-adapters"
        pattern="*${{ runner.os }}-${{ runner.arch }}.zip"

        if [ "${{ inputs.version }}" = "latest" ]; then
          tag=$(gh release view -R "$repo" --json tagName --jq .tagName)
        else
          tag="${{ inputs.version }}"
        fi
        echo "version=$tag" >> $GITHUB_OUTPUT

        gh release download "$tag" -R "$repo" -p "$pattern" --clobber -O release-archive.zip

    - name: Set MM_DATA_DIR
      shell: bash
      id: set-path
      run: |
        if [ -n "${{ inputs.destination }}" ]; then
          base="${{ inputs.destination }}"
        else
          case "${{ runner.os }}" in
            Windows) base="$LOCALAPPDATA/pymmcore-plus/pymmcore-plus/mm" ;;
            macOS)   base="$HOME/Library/Application Support/pymmcore-plus/mm" ;;
            Linux)   base="$HOME/.local/share/pymmcore-plus/mm" ;;
          esac
        fi

        echo "mm-data-dir=$base/Micro-Manager-$version" >> $GITHUB_OUTPUT

    - name: Extract adapters
      shell: bash
      run: |
        out="${{ steps.set-path.outputs.mm-data-dir }}"
        mkdir -p "$out"
        unzip -o release-archive.zip -d "$out"
        rm release-archive.zip
